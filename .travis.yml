dist: xenial
sudo: required

language: go
arch:
  - amd64
  - ppc64le

jobs:
  include:
    # YAML alias, for settings shared across the tests
    - &base-test
      stage: test
      go_import_path: github.com/openshift/odo
      go: "1.13.x"
      install:
        - make goget-tools
      script:
        - export PATH="$PATH:$GOPATH/bin"
        - make bin
        - make validate
        - make test-coverage
      after_success:
        # submit coverage.txt to codecov.io
        - bash <(curl -s https://codecov.io/bash)
      after_failure:
        - free -m
        - dmesg | grep memory

      
    # YAML alias, for settings shared across the tests on windows
    - &windows-test
      stage: Test
      name: "Unit test on windows"
      os: 
        - windows
      init:
      - git config --system core.longpaths true
      go_import_path: github.com/openshift/odo
      go: "1.13.x"
      install:
        - systeminfo.exe | grep '^OS'
        - choco install make
        - make goget-tools
      script:
        - export PATH="$PATH:$GOPATH/bin"
        - make bin
        - rm -r /tmp/*
        - make test
      after_success: skip

    # YAML alias, for settings shared across the tests on macOS
    - &osx-test
      stage: Test
      name: "Unit test on OSX"
      os:
        - osx
      go_import_path: github.com/openshift/odo
      go: "1.13.x"
      install:
        - make goget-tools
      script:
        - system_profiler SPSoftwareDataType
        - export PATH="$PATH:$GOPATH/bin"
        - make bin
        - make validate
        - make test
      after_success: skip

    - <<: *base-test
      stage: test
      name: "generic, login, component command and plugin handler integration tests"
      script:
        - ./scripts/oc-cluster.sh
        - make configure-supported-311-is
        - make bin
        - sudo cp odo /usr/bin
        - odo login -u developer
        - travis_wait make test-generic
        - travis_wait make test-cmd-login-logout
        - travis_wait make test-cmd-cmp
        - travis_wait make test-plugin-handler
        - odo logout

    - <<: *base-test
      stage: test
      name: "preference, config, component sub-commands and debug command integration tests"
      script:
        - ./scripts/oc-cluster.sh
        - make configure-supported-311-is
        - make bin
        - sudo cp odo /usr/bin
        - odo login -u developer
        - travis_wait make test-cmd-pref-config
        - travis_wait make test-cmd-cmp-sub
        - travis_wait make test-cmd-debug
        - odo logout

    # Run service-catalog e2e tests
    - <<: *base-test
      stage: test
      name: "service, link and component sub-commands command integration tests"
      script:
        - ./scripts/oc-cluster.sh service-catalog
        - make configure-supported-311-is
        - make bin
        - sudo cp odo /usr/bin
        - odo login -u developer
        - travis_wait make test-cmd-service
        - travis_wait make test-cmd-link-unlink-311-cluster
        - odo logout

    - <<: *base-test
      stage: test
      name: "watch, storage, app, project, URL and push command integration tests"
      script:
        - ./scripts/oc-cluster.sh
        - make configure-supported-311-is
        - make bin
        - sudo cp odo /usr/bin
        - odo login -u developer
        - travis_wait make test-cmd-watch
        - travis_wait make test-cmd-storage
        - travis_wait make test-cmd-app
        - travis_wait make test-cmd-push
        - travis_wait make test-cmd-project
        - travis_wait make test-cmd-url
        - odo logout

    - <<: *base-test
      stage: test
      # Docker push target test command does not need a running cluster at all, however few test
      # scenario of docker devfile url testing needs only Kube config file. So the test has been
      # added here just to make sure docker devfile url command test gets a proper kube config file.
      # without creating a separate OpenShift cluster.
      name: "devfile catalog, create, push, watch, delete, registry, exec, test, env, status, config, debug and log command integration tests"
      script:
        - ./scripts/oc-cluster.sh
        - make configure-supported-311-is
        - make bin
        - sudo cp odo /usr/bin
        # Commenting out the docker test target (though test-cmd-docker-devfile-url-pushtarget is not broken)
        # to avoid regression failure due to https://github.com/openshift/odo/issues/3714
        # - travis_wait make test-cmd-docker-devfile-url-pushtarget
        # These tests need cluster login as they will be interacting with a Kube environment
        - odo login -u developer
        - travis_wait 60 make test-integration-devfile
        - odo logout

    - <<: *base-test
      stage: test
      name: "core beta, java, source e2e tests"
      script:
        - ./scripts/oc-cluster.sh
        - make configure-supported-311-is
        - make bin
        - sudo cp odo /usr/bin
        - odo login -u developer
        - travis_wait make test-e2e-beta
        - travis_wait make test-e2e-java
        - travis_wait make test-e2e-source
        - travis_wait make test-e2e-images
        - travis_wait make test-e2e-devfile
        - odo logout
    
    # Fix https://github.com/openshift/odo/issues/3714 to uncomment tests
    # - <<: *base-test
    #   stage: test
    #   name: "docker devfile push, watch, url, test, catalog, exec and delete command integration tests"
    #   script:
    #     - make bin
    #     - sudo cp odo /usr/bin
    #     - travis_wait make test-cmd-docker-devfile-push
    #     - travis_wait make test-cmd-docker-devfile-status
    #     - travis_wait make test-cmd-docker-devfile-watch
    #     - travis_wait make test-cmd-docker-devfile-catalog
    #     - travis_wait make test-cmd-docker-devfile-delete
    #     - travis_wait make test-cmd-docker-devfile-url
    #     - travis_wait make test-cmd-docker-devfile-test
    #     - travis_wait make test-cmd-docker-devfile-exec

    # Run devfile integration test on Kubernetes cluster    
    - <<: *base-test
      stage: test
      name: "devfile catalog, url, watch, push, debug, delete, exec, test, log, status, storage and create command integration tests on kubernetes cluster"
      env:
        - MINIKUBE_WANTUPDATENOTIFICATION=false
        - MINIKUBE_WANTREPORTERRORPROMPT=false
        - MINIKUBE_HOME=$HOME
        - CHANGE_MINIKUBE_NONE_USER=true
        - KUBECONFIG=$HOME/.kube/config
      before_script:
        # Download kubectl, a cli tool for accessing Kubernetes cluster
        - curl -Lo kubectl https://storage.googleapis.com/kubernetes-release/release/v1.16.1/bin/linux/amd64/kubectl && chmod +x kubectl && sudo mv kubectl /usr/local/bin/
        # Download minikube and set up Kubernetes single node cluster
        - curl -Lo minikube https://storage.googleapis.com/minikube/releases/v1.11.0/minikube-linux-amd64 && chmod +x minikube && sudo mv minikube /usr/local/bin/
        - mkdir -p $HOME/.kube $HOME/.minikube
        - touch $KUBECONFIG
        - sudo minikube start --vm-driver=none --kubernetes-version=v1.16.1
        - "sudo chown -R travis: /home/travis/.minikube/"
        - sudo apt-get -qq update
        - sudo apt-get install -y socat
      script:
        - kubectl cluster-info
        - make bin
        - sudo cp odo /usr/bin
        - export KUBERNETES=true
        - travis_wait make test-cmd-project
        - travis_wait 60 make test-integration-devfile
